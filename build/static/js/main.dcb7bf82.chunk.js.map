{"version":3,"sources":["components/ListItem.js","components/Form.js","components/App.js","serviceWorker.js","index.js"],"names":["ListItem","props","items","console","log","listItems","map","item","className","key","name","onClick","deleteItem","Form","handleInput","event","setState","currentItem","target","value","Date","now","addItem","preventDefault","newItem","state","text","newItems","bind","filteredItems","this","filter","id","onSubmit","type","placeholder","onChange","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2VAmBeA,MAhBf,SAAkBC,GAChB,IAAMC,EAAQD,EAAMC,MACpBC,QAAQC,IAAIF,GACZ,IAAMG,EAAYH,EAAMI,KAAI,SAAAC,GAC1B,OAAO,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KACjC,4BAAKF,EAAKG,MACV,4BAAQC,QAAS,kBAAMV,EAAMW,WAAWL,EAAKE,OAA7C,cAER,OACE,6BACGJ,ICuDQQ,G,wDA/Db,WAAYZ,GAAO,IAAD,8BAChB,cAAMA,IAaVa,YAAa,SAACC,GACV,EAAKC,SAAS,CACZC,YAAa,CACXP,KAAMK,EAAMG,OAAOC,MACnBV,IAAKW,KAAKC,UAlBE,EAuBlBC,QAAU,SAACP,GACTA,EAAMQ,iBACN,IAAMC,EAAU,EAAKC,MAAMR,YAC3B,GAAkB,KAAfO,EAAQE,KAAU,CACnB,IAAMC,EAAS,GAAD,mBAAK,EAAKF,MAAMvB,OAAhB,CAAuBsB,IACrC,EAAKR,SAAS,CACZd,MAAOyB,EACPV,YAAa,CACXP,KAAM,GACND,IAAK,QA9BX,EAAKgB,MAAQ,CACXvB,MAAQ,GACRe,YAAc,CACZP,KAAM,GACND,IAAK,KAGT,EAAKK,YAAc,EAAKA,YAAYc,KAAjB,gBACnB,EAAKN,QAAU,EAAKA,QAAQM,KAAb,gBACf,EAAKhB,WAAa,EAAKA,WAAWgB,KAAhB,gBAXF,E,uDAsCPnB,GACT,IAAMoB,EAAgBC,KAAKL,MAAMvB,MAAM6B,QAAO,SAAAxB,GAAI,OAChDA,EAAKE,MAAMA,KACbqB,KAAKd,SAAS,CACZd,MAAO2B,M,+BAKT,OACE,yBAAKrB,UAAU,OACb,gCACE,0BAAMwB,GAAG,aAAaC,SAAUH,KAAKR,SACnC,2BAAOY,KAAK,OAAOC,YAAY,aAAahB,MAAQW,KAAKL,MAAMR,YAAYP,KAAM0B,SAAUN,KAAKhB,cAChG,4BAAQoB,KAAK,UAAb,QAEA,kBAAC,EAAD,CAAUhC,MAAO4B,KAAKL,MAAMvB,MAC5BU,WAAYkB,KAAKlB,mB,GAxDVyB,IAAMC,YCWVC,E,uKATX,OACE,yBAAK/B,UAAU,aACb,8CACA,kBAAC,EAAD,W,GALU6B,IAAMC,WCQJE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtD,QAAQsD,MAAMA,EAAMC,c","file":"static/js/main.dcb7bf82.chunk.js","sourcesContent":["import React from 'react';\nimport '../ListItem.css'\n\nfunction ListItem(props){\n  const items = props.items;\n  console.log(items)\n  const listItems = items.map(item => {\n    return <div className=\"list\" key={item.key}>\n          <h2>{item.name}</h2>\n          <button onClick={() => props.deleteItem(item.key)}>Delete</button>\n          </div>})\n  return (\n    <div>\n      {listItems}\n    </div>\n\n  )\n}\n\nexport default ListItem;","import React from 'react';\nimport ListItem from './ListItem'\nimport '../Form.css'\n\nclass Form extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      items : [],\n      currentItem : {\n        name: '',\n        key: ''\n      }\n    }\n    this.handleInput = this.handleInput.bind(this)\n    this.addItem = this.addItem.bind(this)\n    this.deleteItem = this.deleteItem.bind(this)\n  }\n\nhandleInput= (event) => {\n    this.setState({\n      currentItem: {\n        name: event.target.value,\n        key: Date.now()\n      }\n    });\n  }\n\n  addItem = (event) => {\n    event.preventDefault();\n    const newItem = this.state.currentItem;\n    if(newItem.text!==\"\"){\n      const newItems=[...this.state.items, newItem]\n      this.setState({\n        items: newItems,\n        currentItem: {\n          name: '',\n          key: ''\n        }\n      })\n    }\n  }\n\n  deleteItem(key){\n    const filteredItems = this.state.items.filter(item =>\n      item.key!==key);\n    this.setState({\n      items: filteredItems\n    })\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <header>\n          <form id=\"to-do-form\" onSubmit={this.addItem}>\n            <input type=\"text\" placeholder=\"Enter task\" value= {this.state.currentItem.name} onChange={this.handleInput}></input>\n            <button type=\"submit\">Add</button>\n          </form>\n            <ListItem items={this.state.items}\n            deleteItem={this.deleteItem}/>\n        </header>\n      </div>\n    );\n  }\n\n}\n\nexport default Form;\n","import React from 'react';\nimport '../App.css';\nimport Form from './Form'\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"name-list\">\n        <h2>Add your tasks</h2>\n        <Form />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}